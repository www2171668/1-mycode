# -- encoding:utf-8 --
"""
Create by ibf on 2018/8/26
"""

import numpy as np


# TODO: 基于Python代码实现一个简单的决策树算法(只支持离散数据的决策树)--->锻炼一下python代码的功底；

def entropy(t):
    """
    计算信息熵
    :param t:  是一个概率组成的集合
    :return:
    """
    return np.sum([-i * np.log2(i) for i in t])


def gini(t):
    """
    计算gini系数
    :param t:
    :return:
    """
    return 1 - np.sum(np.array(t) ** 2)


h = entropy([0.7, 0.3])
print("原始数据的信息熵:%.3f" % h)

# 1. 以房产作为划分属性的考虑
# 房产取值为是，总样本数目是：4个，计算对应的信息熵
p11 = 0.4
h11 = entropy([1.0])
# 房产取值为否，总样本数目是：6个，计算对应的信息熵（以这个特征属性划分后的子数据集中的信息熵）
p12 = 0.6
h12 = entropy([0.5, 0.5])
# 合并信息熵，得到以房产作为划分特征时候的条件熵
h1 = p11 * h11 + p12 * h12
print("以房产作为划分特征时候的条件熵:%.3f" % h1)
print("以房产作为划分特征时候的信息增益:%.3f" % (h - h1))

# 2. 以婚姻情况作为划分属性的考虑
# 婚姻情况取值为离婚，总样本数目是：3个，计算对应的信息熵
p21 = 0.3
h21 = entropy([1.0 / 3, 2.0 / 3])
# 婚姻情况取值为单身，总样本数目是：4个，计算对应的信息熵
p22 = 0.4
h22 = entropy([0.5, 0.5])
# 婚姻情况取值为结婚，总样本数目是：3个，计算对应的信息熵
p23 = 0.3
h23 = entropy([1.0])
# 合并信息熵，得到以婚姻情况作为划分特征时候的条件熵
h2 = p21 * h21 + p22 * h22 + p23 * h23
print("以婚姻情况作为划分特征时候的条件熵:%.3f" % h2)
print("以婚姻情况作为划分特征时候的信息增益:%.3f" % (h - h2))

# 3. 以年收入80作为分割点的划分属性考虑
# 年收入小于80，样本数目：2(2,0)
p31 = 0.2
h31 = entropy([1.0])
# 年收入大于等于80，样本数目：8(5,3)
p32 = 0.8
h32 = entropy([5.0 / 8, 3.0 / 8])
# 合并信息熵，得到以年收入80作为划分特征时候的条件熵
h3 = p31 * h31 + p32 * h32
print("以年收入80作为划分特征时候的条件熵:%.3f" % h3)
print("以年收入80作为划分特征时候的信息增益:%.3f" % (h - h3))

# 3. 以年收入97.5作为分割点的划分属性考虑
# 年收入小于97.5，样本数目：5(2,3)
p41 = 0.5
h41 = entropy([2.0 / 5, 3.0 / 5])
# 年收入大于等于97.5，样本数目：5(5,0)
p42 = 0.5
h42 = entropy([1.0])
# 合并信息熵，得到以年收入97.5作为划分特征时候的条件熵
h4 = p41 * h41 + p42 * h42
print("以年收入97.5作为划分特征时候的条件熵:%.3f" % h4)
print("以年收入97.5作为划分特征时候的信息增益:%.3f" % (h - h4))
